
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: financial_intel_postgres
    environment:
      POSTGRES_DB: financial_intel
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Changed from 5432 to avoid conflict
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_intel_network

  # Redis for Caching and Celery
  redis:
    image: redis:7-alpine
    container_name: financial_intel_redis
    ports:
      - "6380:6379"  # Changed from 6379 to avoid conflict
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_intel_network

  # Neo4j Knowledge Graph Database
  neo4j:
    image: neo4j:5-community
    container_name: financial_intel_neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_dbms_memory_pagecache_size: 1G
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_memory_heap_max__size: 1G
      NEO4J_dbms_connector_bolt_advertised__address: localhost:7688
    ports:
      - "7475:7474"  # Browser (changed from 7474 to avoid conflict)
      - "7688:7687"  # Bolt (changed from 7687 to avoid conflict)
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "neo4j", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_intel_network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: financial_intel_qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readyz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - financial_intel_network
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_intel_celery_worker
    command: celery -A src.tasks worker --loglevel=info --concurrency=4 -Q ingestion,processing
    env_file:
      - ./backend/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/financial_intel
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=neo4j/password
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
      - neo4j
      - qdrant
    networks:
      - financial_intel_network
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks (RSS Monitoring)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_intel_celery_beat
    command: celery -A src.tasks beat --loglevel=info
    env_file:
      - ./backend/.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/financial_intel
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=neo4j/password
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      - redis
      - postgres
      - celery-worker
    networks:
      - financial_intel_network
    restart: unless-stopped

  # Flower for Celery Monitoring (Optional)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_intel_flower
    command: celery -A src.tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - FLOWER_UNAUTHENTICATED_API=true
    depends_on:
      - redis
      - celery-worker
    networks:
      - financial_intel_network
    restart: unless-stopped

  # Frontend Web UI
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: financial_intel_frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - financial_intel_network
    restart: unless-stopped

  # FastAPI Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: financial_intel_backend
    command: uvicorn src.api.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/financial_intel
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_AUTH=neo4j/password
      - REDIS_URL=redis://redis:6379/0
      - QDRANT_URL=http://qdrant:6333
    volumes:
      - ./backend:/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - neo4j
      - qdrant
    networks:
      - financial_intel_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs:
  neo4j_import:
  neo4j_plugins:
  qdrant_data:

networks:
  financial_intel_network:
    driver: bridge
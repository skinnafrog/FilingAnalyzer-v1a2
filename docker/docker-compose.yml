version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: financial_intel
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  neo4j:
    image: neo4j:5-community
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["graph-data-science", "apoc"]'
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_memory_heap_max__size: 2G
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    env_file:
      - ../.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ../backend:/app
      - ../data:/data
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload

  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
    env_file:
      - ../.env
    ports:
      - "3000:3000"
    depends_on:
      - backend
    volumes:
      - ../frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  celery_worker:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    env_file:
      - ../.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    volumes:
      - ../backend:/app
      - ../data:/data
    command: celery -A src.tasks worker --loglevel=info

  celery_beat:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
    env_file:
      - ../.env
    depends_on:
      - redis
      - celery_worker
    volumes:
      - ../backend:/app
    command: celery -A src.tasks beat --loglevel=info

volumes:
  postgres_data:
  redis_data:
  neo4j_data:
  neo4j_logs: